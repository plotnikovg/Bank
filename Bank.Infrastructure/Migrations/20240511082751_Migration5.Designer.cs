// <auto-generated />
using System;
using Bank.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Bank.Infrastructure.Migrations
{
    [DbContext(typeof(BankContext))]
    [Migration("20240511082751_Migration5")]
    partial class Migration5
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.3.24172.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Bank.Domain.Aggregates.BankAccountAggregate.BankAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ClientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<decimal>("WithdrawalLimit")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClientId");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("Bank.Domain.Aggregates.ClientAggregate.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AccountForReceivingTransfersId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountForReceivingTransfersId");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("Bank.Domain.Aggregates.UserAggregate.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Bank.Domain.Aggregates.BankAccountAggregate.BankAccount", b =>
                {
                    b.HasOne("Bank.Domain.Aggregates.ClientAggregate.Client", null)
                        .WithMany("BankAccounts")
                        .HasForeignKey("ClientId");

                    b.OwnsMany("Bank.Domain.Aggregates.BankAccountAggregate.BankCard", "BankCards", b1 =>
                        {
                            b1.Property<Guid>("BankAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<Guid>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uniqueidentifier");

                            b1.HasKey("BankAccountId", "Id");

                            b1.ToTable("BankCard");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");
                        });

                    b.OwnsOne("Bank.Domain.Aggregates.BankAccountAggregate.Money", "Balance", b1 =>
                        {
                            b1.Property<Guid>("BankAccountId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("decimal(18,2)");

                            b1.HasKey("BankAccountId");

                            b1.ToTable("BankAccounts");

                            b1.WithOwner()
                                .HasForeignKey("BankAccountId");

                            b1.OwnsOne("Bank.Domain.Aggregates.BankAccountAggregate.Currency", "Currency", b2 =>
                                {
                                    b2.Property<Guid>("MoneyBankAccountId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasMaxLength(4)
                                        .HasColumnType("nvarchar(4)");

                                    b2.HasKey("MoneyBankAccountId");

                                    b2.ToTable("BankAccounts");

                                    b2.WithOwner()
                                        .HasForeignKey("MoneyBankAccountId");
                                });

                            b1.Navigation("Currency")
                                .IsRequired();
                        });

                    b.Navigation("Balance")
                        .IsRequired();

                    b.Navigation("BankCards");
                });

            modelBuilder.Entity("Bank.Domain.Aggregates.ClientAggregate.Client", b =>
                {
                    b.HasOne("Bank.Domain.Aggregates.BankAccountAggregate.BankAccount", "AccountForReceivingTransfers")
                        .WithMany()
                        .HasForeignKey("AccountForReceivingTransfersId");

                    b.OwnsOne("Bank.Domain.Aggregates.ClientAggregate.Passport", "Passport", b1 =>
                        {
                            b1.Property<Guid>("ClientId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Number")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Series")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("ClientId");

                            b1.ToTable("Clients");

                            b1.WithOwner()
                                .HasForeignKey("ClientId");

                            b1.OwnsOne("Bank.Domain.Aggregates.ClientAggregate.Name", "Name", b2 =>
                                {
                                    b2.Property<Guid>("PassportClientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("FirstName")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("LastName")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("Patronymic")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("SecondName")
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PassportClientId");

                                    b2.ToTable("Clients");

                                    b2.WithOwner()
                                        .HasForeignKey("PassportClientId");
                                });

                            b1.OwnsOne("Bank.Domain.Aggregates.ClientAggregate.RegistrationAddress", "RegistrationAddress", b2 =>
                                {
                                    b2.Property<Guid>("PassportClientId")
                                        .HasColumnType("uniqueidentifier");

                                    b2.Property<string>("BuildingNumber")
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<string>("City")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<int>("HouseNumber")
                                        .HasColumnType("int");

                                    b2.Property<string>("Region")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.Property<DateOnly>("RegistrationDate")
                                        .HasColumnType("date");

                                    b2.Property<string>("Street")
                                        .IsRequired()
                                        .HasColumnType("nvarchar(max)");

                                    b2.HasKey("PassportClientId");

                                    b2.ToTable("Clients");

                                    b2.WithOwner()
                                        .HasForeignKey("PassportClientId");
                                });

                            b1.Navigation("Name")
                                .IsRequired();

                            b1.Navigation("RegistrationAddress");
                        });

                    b.Navigation("AccountForReceivingTransfers");

                    b.Navigation("Passport")
                        .IsRequired();
                });

            modelBuilder.Entity("Bank.Domain.Aggregates.ClientAggregate.Client", b =>
                {
                    b.Navigation("BankAccounts");
                });
#pragma warning restore 612, 618
        }
    }
}
